// Generated by CoffeeScript 1.10.0
var OSTN02C, arrow, displayGeoid, displayGps, displayOsgb, formatAlt, formatEOrN, formatLatOrLon, gpsChanged, gpsFields, id, input, j, k, l, len, len1, len2, osgbChanged, osgbFields, parseAlt, parseEorN, parseLatOrLon, ref, showMissing,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

OSTN02C = OSTN02CFactory();

ref = ['e', 'n', 'mslAlt', 'datum', 'lat', 'lon', 'gpsAlt'];
for (j = 0, len = ref.length; j < len; j++) {
  id = ref[j];
  self[id + 'Field'] = get({
    id: id
  });
}

osgbFields = [eField, nField, mslAltField, datumField];

gpsFields = [latField, lonField, gpsAltField];

arrow = get({
  id: 'arrow'
});

parseLatOrLon = function(s, isLat) {
  var dec, deg, dir, dms, maxVal, min, ref1, ref2, ref3, sec, value;
  dec = s.match(/^\s*-?([0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)\s*$/);
  if (dec) {
    value = parseFloat(s);
  } else {
    dms = s.match(/^\s*([NESW])?\s*([0-9]+)(([^0-9]+([0-9]+))([^0-9]+([0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+))?)?[^NESW0-9]*([NESW])?\s*$/i);
    if (!dms) {
      return null;
    }
    deg = parseInt(dms[2]);
    min = parseInt((ref1 = dms[5]) != null ? ref1 : '0');
    sec = parseFloat((ref2 = dms[7]) != null ? ref2 : '0');
    if (min >= 60 || sec >= 60) {
      return null;
    }
    if ((dms[1] == null) && (dms[8] == null)) {
      return null;
    }
    if ((dms[1] != null) && (dms[8] != null)) {
      return null;
    }
    dir = ((ref3 = dms[1]) != null ? ref3 : dms[8]).toUpperCase();
    if ((isLat && (dir !== 'N' && dir !== 'S')) || ((!isLat) && (dir !== 'E' && dir !== 'W'))) {
      return null;
    }
    value = OSTN02C.decimalFromDegMinSec({
      deg: deg,
      min: min,
      sec: sec,
      westOrSouth: dir === 'W' || dir === 'S'
    });
  }
  maxVal = isLat ? 90 : 180;
  if (value < -maxVal || value > maxVal) {
    return null;
  }
  return value;
};

parseAlt = function(s) {
  var validFormat;
  validFormat = s.match(/^\s*-?([0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)\s*m?\s*$/);
  if (validFormat) {
    return parseFloat(s);
  } else {
    return null;
  }
};

parseEorN = function(s) {
  var validFormat;
  validFormat = s.match(/^\s*-?([0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+)\s*$/);
  if (validFormat) {
    return parseFloat(s);
  } else {
    return null;
  }
};

formatLatOrLon = function(v) {
  return v.toFixed(6);
};

formatEOrN = function(v) {
  return v.toFixed(0);
};

formatAlt = function(alt) {
  return (Math.round(alt)) + 'm';
};

showMissing = function(inputs) {
  var input, k, len1, results;
  results = [];
  for (k = 0, len1 = inputs.length; k < len1; k++) {
    input = inputs[k];
    results.push(input.value = "—");
  }
  return results;
};

displayGps = function(latLon) {
  if (latLon != null) {
    latField.value = formatLatOrLon(latLon.lat);
    lonField.value = formatLatOrLon(latLon.lon);
    return gpsAltField.value = formatAlt(latLon.elevation);
  } else {
    return showMissing(gpsFields);
  }
};

displayOsgb = function(en) {
  displayGeoid(en);
  if (en != null) {
    eField.value = formatEOrN(en.e);
    nField.value = formatEOrN(en.n);
    return mslAltField.value = formatAlt(en.elevation);
  } else {
    return showMissing(osgbFields);
  }
};

displayGeoid = function(en) {
  var geoidCaption, geoidName, geoidRegion;
  if (en != null) {
    geoidName = OSTN02C.geoidNameForIndex(en.geoid);
    geoidRegion = OSTN02C.geoidRegionForIndex(en.geoid);
    geoidCaption = geoidRegion + (geoidName === geoidRegion ? '' : " (" + geoidName + ")");
    return datumField.innerHTML = geoidCaption;
  } else {
    return datumField.innerHTML = "—";
  }
};

osgbChanged = function() {
  var e, elevation, enETRS89, i, input, k, len1, n, ref1, s, strs, values;
  strs = (function() {
    var k, len1, ref1, results;
    ref1 = osgbFields.slice(0, 3);
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      input = ref1[k];
      results.push(input.value);
    }
    return results;
  })();
  values = (function() {
    var k, len1, results;
    results = [];
    for (i = k = 0, len1 = strs.length; k < len1; i = ++k) {
      s = strs[i];
      results.push(i === 2 ? parseAlt(s) : parseEorN(s));
    }
    return results;
  })();
  ref1 = osgbFields.slice(0, 3);
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    input = ref1[i];
    cls(input, values[i] != null ? {
      remove: 'invalid'
    } : {
      add: 'invalid'
    });
  }
  if (indexOf.call(values, null) >= 0) {
    displayGps(null);
    displayGeoid(null);
    return;
  }
  e = values[0], n = values[1], elevation = values[2];
  enETRS89 = OSTN02C.ETRS89EastingNorthingFromOSGB36EastingNorthing({
    e: e,
    n: n,
    elevation: elevation,
    geoid: 0
  });
  if (enETRS89.geoid === 0) {
    displayGps(null);
    displayGeoid(null);
    return;
  }
  displayGeoid(enETRS89);
  displayGps(OSTN02C.ETRS89LatLonFromETRS89EastingNorthing(enETRS89));
  arrow.style.visibility = 'visible';
  return arrow.style.transform = 'scaleX(1)';
};

gpsChanged = function() {
  var elevation, en, i, input, k, lat, len1, lon, s, strs, values;
  strs = (function() {
    var k, len1, results;
    results = [];
    for (k = 0, len1 = gpsFields.length; k < len1; k++) {
      input = gpsFields[k];
      results.push(input.value);
    }
    return results;
  })();
  values = (function() {
    var k, len1, results;
    results = [];
    for (i = k = 0, len1 = strs.length; k < len1; i = ++k) {
      s = strs[i];
      results.push(i === 2 ? parseAlt(s) : parseLatOrLon(s));
    }
    return results;
  })();
  for (i = k = 0, len1 = gpsFields.length; k < len1; i = ++k) {
    input = gpsFields[i];
    cls(input, values[i] != null ? {
      remove: 'invalid'
    } : {
      add: 'invalid'
    });
  }
  if (indexOf.call(values, null) >= 0) {
    displayOsgb(null);
    return;
  }
  lat = values[0], lon = values[1], elevation = values[2];
  en = OSTN02C.OSGB36EastingNorthingFromETRS89EastingNorthing(OSTN02C.ETRS89EastingNorthingFromETRS89LatLon({
    lat: lat,
    lon: lon,
    elevation: elevation
  }));
  if (en.geoid === 0) {
    displayOsgb(null);
    return;
  }
  displayOsgb(en);
  arrow.style.visibility = 'visible';
  return arrow.style.transform = 'scaleX(-1)';
};

for (k = 0, len1 = osgbFields.length; k < len1; k++) {
  input = osgbFields[k];
  input.oninput = osgbChanged;
}

for (l = 0, len2 = gpsFields.length; l < len2; l++) {
  input = gpsFields[l];
  input.oninput = gpsChanged;
}

//# sourceMappingURL=convert.js.map
